import cmd
from scraping import *
import pickle
import os
from Data_Methods import Data_Methods


class HelpCMD(cmd.Cmd, Webscraping):

    """
    Web Scraping CMD
    """

    def __init__(self):
        cmd.Cmd.__init__(self)
        self.prompt = ">>>"
        self.cmdloop()

    def do_seturl(self, url):
        """
        Set URL of Fishpond page to scrap information from
         """
        URL.go(self)

    def do_product(self, webscraping):
        """
        List of all scraped product names, printed as 'Product i : Product Name
         """
        r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        i = len(Webscraping.product_name(self))
        while (i < 20):
            for i in r: (print("Product {} : ".format(i),
                               Webscraping.product_name(self)[i - 2]))
            i += 1

    def do_isbn(self, webscraping):
        """
        List of all scraped product ISBN's, printed as 'ISBN for Product i : ISBN'
        """
        r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        i = len(Webscraping.product_name(self))
        while (i < 20):
            for i in r: (print("ISBN for Product {} : ".format(i),
                               Webscraping.isbn(self)[i - 2]))
            i += 1

    def do_savings(self, webscraping):
        """
        List of all scraped savings, as list
        """
        r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        i = len(Webscraping.product_name(self))
        while (i < 20):
            for i in r: (print("Savings for Product {} (%): ".format(i),
                               Webscraping.saving_total(self)[i - 2]))
            i += 1

    def do_publish(self, webscraping):
        """
        List of all scraped product's Publishing Date, as list
        """
        r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        i = len(Webscraping.product_name(self))
        while (i < 20):
            for i in r: (print("Publishing Date for Product {}: ".format(i),
                               Webscraping.publishing_date(self)[i - 2]))
            i += 1

    def do_rrp(self, webscraping):
        """
        List of all scraped product RRP, as list
        """
        r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        i = len(Webscraping.product_name(self))
        while (i < 20):
            for i in r: (print("RRP for Product {} ($): ".format(i),
                               Webscraping.RRP(self)[i - 3]))
            i += 1

    def do_sale(self, webscraping):
        """
        List of all scraped product's Sale Price, as list
        """
        r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        i = len(Webscraping.product_name(self))
        while (i < 20):
            for i in r: (print("Sale Price for Product {} ($): ".format(i),
                               Webscraping.sale_prices(self)[i - 2]))
            i += 1

    def do_image(self, webscraping):
        """
        List of all scraped product's relevant image, as url list
        """
        r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        i = len(Webscraping.product_name(self))
        while (i < 20):
            for i in r: (print("Photo Link for Product {}: ".format(i),
                               Webscraping.photo_link(self)[i - 2]))
            i += 1

    def do_pricecomparison(self, webscraping):
        """
        Graphical comparison of RRP and Sale Price for all products
        """
        Data_Methods.price_comparison(self)

    def do_totalsavingsdata(self, webscraping):
        """
        Graph showing the savings (%) of all the products scraped
        """
        Data_Methods.total_savings_data(self)

    def do_publishingdata(self, webscraping):
        """
        Pie chart showing a breakdown publishing dates by month
        """
        Data_Methods.publishing_data(self)

    def do_quit(self, webscraping):
        """
        Quit from my CMD
        """
        print("Quitting ......")
        return True

    def help_quit(self, webscraping):
        print('\n'.join(['Quit from my CMD', ':return: True']))

    def do_savefile(self, webscraping):
        """
        Saves information scraped to txt file
        :data types: Product Name, ISBN, Publish Date, Normal Price,
                    Sale Price, Savings, Photos, All
        """
        results = Webscraping()
        save_path = input("What is the directory?: ")
        try:
            name_of_file = input("What is the name of the file: ")
            type = input("What data type do you want to save?: ")
            if type == 'Product Name':
                save = results.product_name()
            elif type == 'ISBN':
                save = results.isbn()
            elif type == "Publish Date":
                save = results.publishing_date()
            elif type == 'Normal Price':
                save = results.RRP()
            elif type == 'Sale Price':
                save = results.sale_prices()
            elif type == 'Savings':
                save = results.saving_total()
            elif type == 'Photos':
                save = results.photo_link()
            elif type == "Save all":
                save = (results.product_name(), results.isbn(), results.RRP(),
                        results.sale_prices(),
                        results.saving_total(), results.photo_link())
            complete_name = os.path.join(save_path, name_of_file + ".txt")
            file1 = open(complete_name, "wb")
            pickle.dump(save, file1)
            file1.close()
        except FileNotFoundError:
                print("Please enter a valid save directory")

    def do_loadfile(self, webscraping):
        """
        Loads data from previously saved file
        """
        infile = input("Please enter the file path: ")
        try:
            f = open(infile, 'rb')
            results = pickle.load(f)
            print(results)
            f.close()
        except FileNotFoundError:
            print("Please enter a valid file path")

if __name__ == '__main__':
    prompt = HelpCMD()
